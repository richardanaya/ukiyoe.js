{
  "author": {
    "name": "Charles Davison",
    "email": "charlie@powmedia.co.uk"
  },
  "name": "buildify",
  "description": "Builder for creating distributable JavaScript files from source. Concatenate, wrap, uglify.",
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/powmedia/buildify.git"
  },
  "main": "index.js",
  "dependencies": {
    "mkdirp": "0.3.2",
    "uglify-js": "1.3.4",
    "underscore": "1.3.3",
    "clean-css": "0.6.0"
  },
  "devDependencies": {
    "nodeunit": "latest",
    "sinon": "latest"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.4.0"
  },
  "readme": "buildify\n===\n\nBuilder for creating distributable JavaScript files from source. Concatenate, wrap, uglify.\n\n\n##Install\nRequires [NodeJS](http://nodejs.org/#download) to run.\n\nThen install buildify via npm:\n\n    npm install buildify\n\nCreate a file with your build script (see the example in 'Usage' below), call it something like `build.js` and then run it with:\n\n    node build.js\n  \n\n##Usage\n\n    var buildify = require('buildify');\n    \n    buildify()\n      .load('base.js')\n      .concat(['part1.js', 'part2.js'])\n      .wrap('../lib/template.js', { version: '1.0' })\n      .save('../distribution/output.js')\n      .uglify()\n      .save('../distribution/output.min.js');\n\n\n##API\n\n###buildify([dir, options])\nCreate a new Builder instance.\n\nTakes the starting directory as the first argument, e.g. __dirname. If this is not set, the current working directory is used.\n\nOptions:\n- `interpolate`   Underscore template settings. Default to mustache {{var}} style interpolation tags.\n- `encoding`      File encoding (Default 'utf-8')\n- `eol`           End of line character (Default '\\n')\n- `quiet`         Whether to silence console output\n\n\n###setDir(absolutePath)\nSet the current working directory.\n\n\n###changeDir(relativePath)\nChange the current working directory.\n\n\n###setContent(content)\nSet the content to work with.\n\n\n###getContent()\nGet the current content. Note: breaks the chain.\n\n\n###load(file)\nLoad file contents.\n\n\n###concat(files, [eol])\nConcatenate the content of multiple files.\n\n    buildify()\n        .concat(['file1.js', 'file2.js']);\n\n\n###wrap(template, [data])\nWrap the contents in a template.\n\nUseful for creating AMD/CommonJS compatible versions of code, adding notes/comments to the top of the file etc.\n\nBy default the template uses Mustache-style tags and has a special tag, `{{body}}` which is where the contents are placed.\n\nOther custom tags can be included and passed in the `data` argument.\n\n    //template.js\n    /*\n     * This is a module for doing stuff.\n     * Version {{version}}.\n     */\n    (function() {\n        //Setup code can go here\n        \n        {{body}}\n    });\n    \n    //build.js\n    buildify()\n        .load('src.js')\n        .wrap('template.js', { version: '1.0' });\n\n\n###perform(fn)\nPerform a function on the content. The content is set to what the function returns.\n\n    buildify()\n        .load('src.js')\n        .perform(function(content) {\n            return content.replace(\\assetpath\\g, 'http://cdn.example.com');\n         });    \n\n\n###uglify(options)\nMinimise your JS using uglifyJS.\n\nOptions:\n- mangle: Whether to mangle output from UglifyJS. Default: true\n\n\n###cssmin([maxLineLength])\nMinimise your CSS using clean-css.\nOptionally a line break is inserted after 'maxLineLength' characters in the minimized css file.\n\n\n###save(file)\nSave the contents to a file.\n\n\n###clear()\nReset/clear contents.\n\n\n##Changelog\n0.3.1\nFix mangling (can be disabled with mangle: false option in uglify()) (powmedia, whadar)\n\n0.3.0\nAdd cssmin() for minifying CSS (RustyMarvin)\nFix tests under Windows (RustyMarvin)\n\n0.2.0\nAdd perform() for custom functions (trevorgerhardt)\n",
  "readmeFilename": "README.md",
  "_id": "buildify@0.3.1",
  "_from": "buildify@"
}
